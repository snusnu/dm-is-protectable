h2. dm-is-protectable

A DataMapper plugin that allows to protect property assignment.
This makes it very easy to implement permission checking in the model
(just like any other _business rule_).

h3. Shoutouts

Big Thx to <a href="http://perens.com/">Bruce Perens</a>
for inspiring this with his ModelSecurity plugin for rails!

h3. Overview

@dm-is-protectable@ allows you to specify security permissions 
on any or all of the properties of any @DataMapper::Resource@.

Security permissions are specified in the declaration of the resource's class, 
The specification includes the _permission_ that should be granted (one of @:read@, @:write@, or @:access@), 
the names of the _properties_ to which the _permission_ applies, and
an optional _guard_ that must return @true@ or @false@ 
depending on whether the access should be allowed or denied.

If *no* security permissions are declared for a property, that property
may always be accessed. This is likely to change though, I'm thinking about
a @paranoid@ option that can be used to to either _whitelist_ or _blacklist_
all properties by default.

The security tests themselves may access any data with impunity. 
A thread local variable is used to disable further security testing 
while a security test is in progress.

Security permissions can be installed using the @let@ and @deny@ class methods.

<pre>
<code>
let :read,   ...   # specifies when a property _can_ be read, 
let :write,  ...   # specifies when a property _can_ be written
let :access, ...   # does both.

deny :read,   ...  # specifies when a property _cannot_ be read, 
deny :write,  ...  # specifies when a property _cannot_ be written
deny :access, ...  # does both.
</code>
</pre>

If these aren't expressive enough try
<pre><code>is :protectable, :extended => true</code></pre>
This will extend the following Module in your resource:

<pre>
<code>
# Syntactic sugar
# this can be extended optionally
module MoreClassMethods
  
  # same as let without guard
  def always_let(permission, properties = [])
    let(permission, properties)
  end
  
  # same as deny without guard
  def always_deny(permission, properties = [])
    deny(permission, properties)
  end
  
  # even more sugar
  alias :never_let :always_deny
  alias :never_deny :always_let
  
end
</code>
</pre>

h3. Guards

Guards are the part that let you specify the security permissions.

* _guards_ can be specified using @true@, @false@, a @Symbol@, a @String@, or a @Hash@
** if a @Hash@ is used, _the only two keys that are recognized_ are @:if@ and @:unless@. 
** if a @Hash@ is used, _the only values that are recognized_, are @true@, @false@, a @Symbol@, a @String@, a @lambda@, or a @Proc@.
* _no guard_ is the same as specifying a _guard that always returns true_.
* _no properties_ means that the _guard_ (if present) is not bound to any property
** _guards_ that _are not bound_ to any property will be evaluated _for every property_. 
** _guards_ that _are not bound_ to any property will be evaluated *before* all _guards_ that _are_ bound to a specific property
* any _guard_ that returns @false@ ends the run, further tests will not be evaluated.

Here are some examples ...

<pre>
<code>
let :read                      # NO CONDITION => always true
let :read, true                # always let read
let :read, false               # never let read
let :read, :if     => true     # weird way to say 'always let read'
let :read, :unless => true     # weird way to say 'never let read'
let :read, :if     => :funny?  # :funny? must be an instance method
let :read, :unless => :funny?  # :funny? must be an instance method
let :read, :if     => "funny?" # "funny?" must be an instance method
let :read, :unless => "funny?" # "funny?" must be an instance method

# -------------------------------------------------------------------
# TODO Add specs for this!!
# -------------------------------------------------------------------
# In all the following examples, |r| is the current resource instance
# -------------------------------------------------------------------

let :read, :if     => lambda do |r|
  r.current_user.funny?
end

let :read, :unless => lambda do |r|
  r.current_user.funny?
end

let :read, :if     => Proc.new do |r|
  r.current_user.funny?
end

let :read, :unless => Proc.new do |r|
  r.current_user.funny?
end
</code>
</pre>

h3. Accessing Security Test Results

The two instance methods, @readable?@ and @writable?@ are available
on any instance of @DataMapper::Resource@ that @is :protectable@.
They can be used to inform the program if a particular property can be accessed or not.


h3. Exceptions

@DataMapper@ provides two internal methods to access properties: 
@DataMapper::Property#get@ and @DataMapper::Property#set@. 
@Extlib::Hook@ _before_ hooks are registered on these methods that will raise 
various subclasses of @SecurityError@ when an unpermitted access is attempted.
The following exceptions may occur when using @dm-is-protectable@

<pre>
<code>
class DmIsProtectableException < SecurityError; end
class InvalidPermission < DmIsProtectableException; end
class IllegalPropertyAccess < DmIsProtectableException; end
class IllegalReadAccess < IllegalPropertyAccess; end
class IllegalWriteAccess < IllegalPropertyAccess; end
class IllegalDisplayAccess < IllegalPropertyAccess; end
</code>
</pre>

h3. Full Example (taken from the specs)

<pre>
<code>
class Person

  include DataMapper::Resource

  property :id,         Serial

  property :nick,       String
  property :firstname,  String
  property :lastname,   String
  property :email,      String    
  property :phone,      String      

  property :mood,       String
  property :shoutbox,   String
  property :pm,         String

  property :birthday,   String
  property :hobbies,    String
  property :status,     String

  property :created_at, DateTime
  property :updated_at, DateTime


  is :protectable

  let :read, :nick                      # would normally be merged into one
  let :read, [ :firstname, :lastname ]  # splitted here only for demonstration
  let :read, :pm,                       :if     => :funny?
  let :read, [ :phone, :email ],        :unless => :paranoid?

  let :write, :pm
  let :write, :nick,                    :if     => :funny?
  let :write, [ :phone, :email ],       :unless => :serious?

  let :access, :mood
  let :access, :status,                 :if     => :funny?
  let :access, [ :birthday, :hobbies ], :unless => :serious?


  # permission checking helpers
  [ :paranoid, :funny, :serious ].each do |mood|
    define_method "#{mood}!" do
      self.mood = "'#{mood}'"
    end
    define_method "#{mood}?" do
      self.mood == "'#{mood}'"
    end
  end

end
</code>
</pre>


h3. Support for let :display

*TODO: think about supporting this here (plus in a separate gem)*

A companion mechanism could be used to control views.

 let :display :phone_nr, :if => admin?

let :display could be useful for specifying if a table view should have a
column for a particular property. Its tests would have to be declared as class
methods of the resource, while the tests of @let :read@, @let :write@, and
@let :access@ are instance methods. This is because the information declared
by @let :display@ is accessed before iteration over the resources begins.

The class method @displayable?@ would return @true@ or @false@ 
depending upon whether a particular property should be displayed or not. 
This could be used to modify a view so that any non-writable data 
will not be presented in an editable field.

A DisplayHelper module could overload the methods that are usually used 
to edit models so that they will not attempt to read or write what they 
aren't permitted, and will render appropriately for the permissions 
on any resource property.

Those methods (in rails) are:
* check_box 
* file_field
* hidden_field
* password_field 
* radio_button
* text_area
* text_field